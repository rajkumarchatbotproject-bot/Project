import React, { useState, useRef, useEffect } from 'react';

// Main Chatbot App Component
function App() {
    // State to store chat messages
    const [messages, setMessages] = useState([]);
    // State to store the current input message
    const [inputMessage, setInputMessage] = useState('');
    // State to indicate if the bot is currently loading a response
    const [isLoading, setIsLoading] = useState(false);
    // Ref for scrolling to the latest message
    const messagesEndRef = useRef(null);

    // Context for the chatbot to inform the AI model
    const chatbotContext = `You are a helpful AI assistant for Yadhava College, an Arts and Science college located in Madurai, India. 
    Answer questions about the college, its courses, admissions, campus life, etc., based on general knowledge about arts and science colleges and the provided context.
    Keep your answers concise and informative.`;

    // Scroll to the bottom of the chat window when messages update
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [messages]);

    // Function to send a message to the chatbot
    const sendMessage = async () => {
        if (inputMessage.trim() === '') return;

        const userMessage = { sender: 'user', text: inputMessage };
        setMessages((prevMessages) => [...prevMessages, userMessage]);
        setInputMessage('');
        setIsLoading(true);

        try {
            // Prepare chat history for the Gemini API call
            let chatHistory = [{ role: "user", parts: [{ text: chatbotContext + "\n\n" + inputMessage }] }];

            const payload = { contents: chatHistory };
            // API key is handled by the Canvas environment if left empty
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            const result = await response.json();

            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const botResponseText = result.candidates[0].content.parts[0].text;
                setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botResponseText }]);
            } else {
                setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: "Sorry, I couldn't generate a response. Please try again." }]);
                console.error("Unexpected API response structure:", result);
            }
        } catch (error) {
            setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: "An error occurred while fetching the response. Please check your network connection." }]);
            console.error("Error calling Gemini API:", error);
        } finally {
            setIsLoading(false);
        }
    };

    // Handle Enter key press
    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !isLoading) {
            sendMessage();
        }
    };

    return (
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col items-center justify-center p-4 font-sans">
            <div className="bg-white rounded-xl shadow-2xl w-full max-w-2xl flex flex-col h-[80vh] border border-gray-200">
                {/* Chat Header */}
                <div className="p-5 bg-blue-600 text-white rounded-t-xl flex items-center justify-between">
                    <h1 className="text-2xl font-bold flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-7 w-7 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                        </svg>
                        Yadhava College Chatbot
                    </h1>
                    <span className="text-sm opacity-80">Madurai, Arts & Science</span>
                </div>

                {/* Chat Messages Area */}
                <div className="flex-1 p-5 overflow-y-auto space-y-4">
                    {messages.length === 0 && (
                        <div className="text-center text-gray-500 mt-10">
                            <p className="text-lg">Welcome! Ask me anything about Yadhava College.</p>
                            <p className="text-sm">e.g., "What courses are offered?" or "Tell me about campus life."</p>
                        </div>
                    )}
                    {messages.map((msg, index) => (
                        <div
                            key={index}
                            className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                            <div
                                className={`max-w-[75%] p-3 rounded-lg shadow-md ${
                                    msg.sender === 'user'
                                        ? 'bg-blue-500 text-white rounded-br-none'
                                        : 'bg-gray-200 text-gray-800 rounded-bl-none'
                                }`}
                            >
                                {msg.text}
                            </div>
                        </div>
                    ))}
                    {isLoading && (
                        <div className="flex justify-start">
                            <div className="max-w-[75%] p-3 rounded-lg bg-gray-200 text-gray-800 rounded-bl-none">
                                <div className="flex items-center">
                                    <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-gray-500 mr-2"></div>
                                    Typing...
                                </div>
                            </div>
                        </div>
                    )}
                    <div ref={messagesEndRef} /> {/* Scroll target */}
                </div>

                {/* Message Input */}
                <div className="p-5 border-t border-gray-200 flex items-center space-x-3">
                    <input
                        type="text"
                        className="flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200"
                        placeholder="Type your question here..."
                        value={inputMessage}
                        onChange={(e) => setInputMessage(e.target.value)}
                        onKeyPress={handleKeyPress}
                        disabled={isLoading}
                    />
                    <button
                        onClick={sendMessage}
                        className="p-3 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={isLoading}
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    );
}

export default App;
